// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alien4cloud/alien4cloud-go-client/v3/alien4cloud (interfaces: ApplicationService)

// Package a4cmocks is a generated GoMock package.
package a4cmocks

import (
	context "context"
	reflect "reflect"

	alien4cloud "github.com/alien4cloud/alien4cloud-go-client/v3/alien4cloud"
	gomock "github.com/golang/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// CreateAppli mocks base method.
func (m *MockApplicationService) CreateAppli(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppli", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppli indicates an expected call of CreateAppli.
func (mr *MockApplicationServiceMockRecorder) CreateAppli(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppli", reflect.TypeOf((*MockApplicationService)(nil).CreateAppli), arg0, arg1, arg2)
}

// DeleteApplication mocks base method.
func (m *MockApplicationService) DeleteApplication(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockApplicationServiceMockRecorder) DeleteApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockApplicationService)(nil).DeleteApplication), arg0, arg1)
}

// GetApplicationByID mocks base method.
func (m *MockApplicationService) GetApplicationByID(arg0 context.Context, arg1 string) (*alien4cloud.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationByID", arg0, arg1)
	ret0, _ := ret[0].(*alien4cloud.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationByID indicates an expected call of GetApplicationByID.
func (mr *MockApplicationServiceMockRecorder) GetApplicationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationByID", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationByID), arg0, arg1)
}

// GetApplicationTag mocks base method.
func (m *MockApplicationService) GetApplicationTag(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationTag indicates an expected call of GetApplicationTag.
func (mr *MockApplicationServiceMockRecorder) GetApplicationTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationTag", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationTag), arg0, arg1, arg2)
}

// GetApplicationsID mocks base method.
func (m *MockApplicationService) GetApplicationsID(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsID", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsID indicates an expected call of GetApplicationsID.
func (mr *MockApplicationServiceMockRecorder) GetApplicationsID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsID", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationsID), arg0, arg1)
}

// GetDeploymentTopology mocks base method.
func (m *MockApplicationService) GetDeploymentTopology(arg0 context.Context, arg1, arg2 string) (*alien4cloud.Topology, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentTopology", arg0, arg1, arg2)
	ret0, _ := ret[0].(*alien4cloud.Topology)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentTopology indicates an expected call of GetDeploymentTopology.
func (mr *MockApplicationServiceMockRecorder) GetDeploymentTopology(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentTopology", reflect.TypeOf((*MockApplicationService)(nil).GetDeploymentTopology), arg0, arg1, arg2)
}

// GetEnvironmentIDbyName mocks base method.
func (m *MockApplicationService) GetEnvironmentIDbyName(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentIDbyName", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentIDbyName indicates an expected call of GetEnvironmentIDbyName.
func (mr *MockApplicationServiceMockRecorder) GetEnvironmentIDbyName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentIDbyName", reflect.TypeOf((*MockApplicationService)(nil).GetEnvironmentIDbyName), arg0, arg1, arg2)
}

// IsApplicationExist mocks base method.
func (m *MockApplicationService) IsApplicationExist(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApplicationExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsApplicationExist indicates an expected call of IsApplicationExist.
func (mr *MockApplicationServiceMockRecorder) IsApplicationExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApplicationExist", reflect.TypeOf((*MockApplicationService)(nil).IsApplicationExist), arg0, arg1)
}

// SetTagToApplication mocks base method.
func (m *MockApplicationService) SetTagToApplication(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTagToApplication", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTagToApplication indicates an expected call of SetTagToApplication.
func (mr *MockApplicationServiceMockRecorder) SetTagToApplication(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTagToApplication", reflect.TypeOf((*MockApplicationService)(nil).SetTagToApplication), arg0, arg1, arg2, arg3)
}
