// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alien4cloud/alien4cloud-go-client/v3/alien4cloud (interfaces: Client)

// Package a4cmocks is a generated GoMock package.
package a4cmocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	alien4cloud "github.com/alien4cloud/alien4cloud-go-client/v3/alien4cloud"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ApplicationService mocks base method.
func (m *MockClient) ApplicationService() alien4cloud.ApplicationService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationService")
	ret0, _ := ret[0].(alien4cloud.ApplicationService)
	return ret0
}

// ApplicationService indicates an expected call of ApplicationService.
func (mr *MockClientMockRecorder) ApplicationService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationService", reflect.TypeOf((*MockClient)(nil).ApplicationService))
}

// CatalogService mocks base method.
func (m *MockClient) CatalogService() alien4cloud.CatalogService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CatalogService")
	ret0, _ := ret[0].(alien4cloud.CatalogService)
	return ret0
}

// CatalogService indicates an expected call of CatalogService.
func (mr *MockClientMockRecorder) CatalogService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CatalogService", reflect.TypeOf((*MockClient)(nil).CatalogService))
}

// DeploymentService mocks base method.
func (m *MockClient) DeploymentService() alien4cloud.DeploymentService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeploymentService")
	ret0, _ := ret[0].(alien4cloud.DeploymentService)
	return ret0
}

// DeploymentService indicates an expected call of DeploymentService.
func (mr *MockClientMockRecorder) DeploymentService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploymentService", reflect.TypeOf((*MockClient)(nil).DeploymentService))
}

// Do mocks base method.
func (m *MockClient) Do(arg0 *http.Request, arg1 ...alien4cloud.Retry) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockClientMockRecorder) Do(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockClient)(nil).Do), varargs...)
}

// EventService mocks base method.
func (m *MockClient) EventService() alien4cloud.EventService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventService")
	ret0, _ := ret[0].(alien4cloud.EventService)
	return ret0
}

// EventService indicates an expected call of EventService.
func (mr *MockClientMockRecorder) EventService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventService", reflect.TypeOf((*MockClient)(nil).EventService))
}

// LogService mocks base method.
func (m *MockClient) LogService() alien4cloud.LogService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogService")
	ret0, _ := ret[0].(alien4cloud.LogService)
	return ret0
}

// LogService indicates an expected call of LogService.
func (mr *MockClientMockRecorder) LogService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogService", reflect.TypeOf((*MockClient)(nil).LogService))
}

// Login mocks base method.
func (m *MockClient) Login(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockClientMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClient)(nil).Login), arg0)
}

// Logout mocks base method.
func (m *MockClient) Logout(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockClientMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockClient)(nil).Logout), arg0)
}

// NewRequest mocks base method.
func (m *MockClient) NewRequest(arg0 context.Context, arg1, arg2 string, arg3 io.ReadSeeker) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockClientMockRecorder) NewRequest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockClient)(nil).NewRequest), arg0, arg1, arg2, arg3)
}

// OrchestratorService mocks base method.
func (m *MockClient) OrchestratorService() alien4cloud.OrchestratorService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrchestratorService")
	ret0, _ := ret[0].(alien4cloud.OrchestratorService)
	return ret0
}

// OrchestratorService indicates an expected call of OrchestratorService.
func (mr *MockClientMockRecorder) OrchestratorService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrchestratorService", reflect.TypeOf((*MockClient)(nil).OrchestratorService))
}

// TopologyService mocks base method.
func (m *MockClient) TopologyService() alien4cloud.TopologyService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopologyService")
	ret0, _ := ret[0].(alien4cloud.TopologyService)
	return ret0
}

// TopologyService indicates an expected call of TopologyService.
func (mr *MockClientMockRecorder) TopologyService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopologyService", reflect.TypeOf((*MockClient)(nil).TopologyService))
}

// UserService mocks base method.
func (m *MockClient) UserService() alien4cloud.UserService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserService")
	ret0, _ := ret[0].(alien4cloud.UserService)
	return ret0
}

// UserService indicates an expected call of UserService.
func (mr *MockClientMockRecorder) UserService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserService", reflect.TypeOf((*MockClient)(nil).UserService))
}
