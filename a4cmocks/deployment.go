// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alien4cloud/alien4cloud-go-client/v3/alien4cloud (interfaces: DeploymentService)

// Package a4cmocks is a generated GoMock package.
package a4cmocks

import (
	context "context"
	reflect "reflect"
	time "time"

	alien4cloud "github.com/alien4cloud/alien4cloud-go-client/v3/alien4cloud"
	gomock "github.com/golang/mock/gomock"
)

// MockDeploymentService is a mock of DeploymentService interface.
type MockDeploymentService struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentServiceMockRecorder
}

// MockDeploymentServiceMockRecorder is the mock recorder for MockDeploymentService.
type MockDeploymentServiceMockRecorder struct {
	mock *MockDeploymentService
}

// NewMockDeploymentService creates a new mock instance.
func NewMockDeploymentService(ctrl *gomock.Controller) *MockDeploymentService {
	mock := &MockDeploymentService{ctrl: ctrl}
	mock.recorder = &MockDeploymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentService) EXPECT() *MockDeploymentServiceMockRecorder {
	return m.recorder
}

// CancelExecution mocks base method.
func (m *MockDeploymentService) CancelExecution(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelExecution", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelExecution indicates an expected call of CancelExecution.
func (mr *MockDeploymentServiceMockRecorder) CancelExecution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelExecution", reflect.TypeOf((*MockDeploymentService)(nil).CancelExecution), arg0, arg1, arg2)
}

// DeployApplication mocks base method.
func (m *MockDeploymentService) DeployApplication(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployApplication", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployApplication indicates an expected call of DeployApplication.
func (mr *MockDeploymentServiceMockRecorder) DeployApplication(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployApplication", reflect.TypeOf((*MockDeploymentService)(nil).DeployApplication), arg0, arg1, arg2, arg3)
}

// GetAttributesValue mocks base method.
func (m *MockDeploymentService) GetAttributesValue(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributesValue", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributesValue indicates an expected call of GetAttributesValue.
func (mr *MockDeploymentServiceMockRecorder) GetAttributesValue(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributesValue", reflect.TypeOf((*MockDeploymentService)(nil).GetAttributesValue), arg0, arg1, arg2, arg3, arg4)
}

// GetCurrentDeploymentID mocks base method.
func (m *MockDeploymentService) GetCurrentDeploymentID(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentDeploymentID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentDeploymentID indicates an expected call of GetCurrentDeploymentID.
func (mr *MockDeploymentServiceMockRecorder) GetCurrentDeploymentID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentDeploymentID", reflect.TypeOf((*MockDeploymentService)(nil).GetCurrentDeploymentID), arg0, arg1, arg2)
}

// GetDeployment mocks base method.
func (m *MockDeploymentService) GetDeployment(arg0 context.Context, arg1 string) (alien4cloud.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", arg0, arg1)
	ret0, _ := ret[0].(alien4cloud.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockDeploymentServiceMockRecorder) GetDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockDeploymentService)(nil).GetDeployment), arg0, arg1)
}

// GetDeploymentList mocks base method.
func (m *MockDeploymentService) GetDeploymentList(arg0 context.Context, arg1, arg2 string) ([]alien4cloud.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentList", arg0, arg1, arg2)
	ret0, _ := ret[0].([]alien4cloud.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentList indicates an expected call of GetDeploymentList.
func (mr *MockDeploymentServiceMockRecorder) GetDeploymentList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentList", reflect.TypeOf((*MockDeploymentService)(nil).GetDeploymentList), arg0, arg1, arg2)
}

// GetDeploymentStatus mocks base method.
func (m *MockDeploymentService) GetDeploymentStatus(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentStatus indicates an expected call of GetDeploymentStatus.
func (mr *MockDeploymentServiceMockRecorder) GetDeploymentStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentStatus", reflect.TypeOf((*MockDeploymentService)(nil).GetDeploymentStatus), arg0, arg1, arg2)
}

// GetExecution mocks base method.
func (m *MockDeploymentService) GetExecution(arg0 context.Context, arg1, arg2, arg3 string) (alien4cloud.Execution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecution", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(alien4cloud.Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecution indicates an expected call of GetExecution.
func (mr *MockDeploymentServiceMockRecorder) GetExecution(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecution", reflect.TypeOf((*MockDeploymentService)(nil).GetExecution), arg0, arg1, arg2, arg3)
}

// GetExecutionByID mocks base method.
func (m *MockDeploymentService) GetExecutionByID(arg0 context.Context, arg1 string) (alien4cloud.Execution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionByID", arg0, arg1)
	ret0, _ := ret[0].(alien4cloud.Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionByID indicates an expected call of GetExecutionByID.
func (mr *MockDeploymentServiceMockRecorder) GetExecutionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionByID", reflect.TypeOf((*MockDeploymentService)(nil).GetExecutionByID), arg0, arg1)
}

// GetExecutions mocks base method.
func (m *MockDeploymentService) GetExecutions(arg0 context.Context, arg1, arg2 string, arg3, arg4 int) ([]alien4cloud.Execution, alien4cloud.FacetedSearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutions", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]alien4cloud.Execution)
	ret1, _ := ret[1].(alien4cloud.FacetedSearchResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetExecutions indicates an expected call of GetExecutions.
func (mr *MockDeploymentServiceMockRecorder) GetExecutions(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutions", reflect.TypeOf((*MockDeploymentService)(nil).GetExecutions), arg0, arg1, arg2, arg3, arg4)
}

// GetInstanceAttributesValue mocks base method.
func (m *MockDeploymentService) GetInstanceAttributesValue(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceAttributesValue", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceAttributesValue indicates an expected call of GetInstanceAttributesValue.
func (mr *MockDeploymentServiceMockRecorder) GetInstanceAttributesValue(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceAttributesValue", reflect.TypeOf((*MockDeploymentService)(nil).GetInstanceAttributesValue), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetLastWorkflowExecution mocks base method.
func (m *MockDeploymentService) GetLastWorkflowExecution(arg0 context.Context, arg1, arg2 string) (*alien4cloud.WorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastWorkflowExecution", arg0, arg1, arg2)
	ret0, _ := ret[0].(*alien4cloud.WorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastWorkflowExecution indicates an expected call of GetLastWorkflowExecution.
func (mr *MockDeploymentServiceMockRecorder) GetLastWorkflowExecution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastWorkflowExecution", reflect.TypeOf((*MockDeploymentService)(nil).GetLastWorkflowExecution), arg0, arg1, arg2)
}

// GetLocationsMatching mocks base method.
func (m *MockDeploymentService) GetLocationsMatching(arg0 context.Context, arg1, arg2 string) ([]alien4cloud.LocationMatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationsMatching", arg0, arg1, arg2)
	ret0, _ := ret[0].([]alien4cloud.LocationMatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationsMatching indicates an expected call of GetLocationsMatching.
func (mr *MockDeploymentServiceMockRecorder) GetLocationsMatching(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationsMatching", reflect.TypeOf((*MockDeploymentService)(nil).GetLocationsMatching), arg0, arg1, arg2)
}

// GetNodeStatus mocks base method.
func (m *MockDeploymentService) GetNodeStatus(arg0 context.Context, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeStatus indicates an expected call of GetNodeStatus.
func (mr *MockDeploymentServiceMockRecorder) GetNodeStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeStatus", reflect.TypeOf((*MockDeploymentService)(nil).GetNodeStatus), arg0, arg1, arg2, arg3)
}

// GetOutputAttributes mocks base method.
func (m *MockDeploymentService) GetOutputAttributes(arg0 context.Context, arg1, arg2 string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputAttributes", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputAttributes indicates an expected call of GetOutputAttributes.
func (mr *MockDeploymentServiceMockRecorder) GetOutputAttributes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputAttributes", reflect.TypeOf((*MockDeploymentService)(nil).GetOutputAttributes), arg0, arg1, arg2)
}

// RunWorkflow mocks base method.
func (m *MockDeploymentService) RunWorkflow(arg0 context.Context, arg1, arg2, arg3 string, arg4 time.Duration) (*alien4cloud.Execution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWorkflow", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*alien4cloud.Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWorkflow indicates an expected call of RunWorkflow.
func (mr *MockDeploymentServiceMockRecorder) RunWorkflow(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWorkflow", reflect.TypeOf((*MockDeploymentService)(nil).RunWorkflow), arg0, arg1, arg2, arg3, arg4)
}

// RunWorkflowAsync mocks base method.
func (m *MockDeploymentService) RunWorkflowAsync(arg0 context.Context, arg1, arg2, arg3 string, arg4 alien4cloud.ExecutionCallback) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWorkflowAsync", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWorkflowAsync indicates an expected call of RunWorkflowAsync.
func (mr *MockDeploymentServiceMockRecorder) RunWorkflowAsync(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWorkflowAsync", reflect.TypeOf((*MockDeploymentService)(nil).RunWorkflowAsync), arg0, arg1, arg2, arg3, arg4)
}

// RunWorkflowAsyncWithParameters mocks base method.
func (m *MockDeploymentService) RunWorkflowAsyncWithParameters(arg0 context.Context, arg1, arg2, arg3 string, arg4 map[string]interface{}, arg5 alien4cloud.ExecutionCallback) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWorkflowAsyncWithParameters", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWorkflowAsyncWithParameters indicates an expected call of RunWorkflowAsyncWithParameters.
func (mr *MockDeploymentServiceMockRecorder) RunWorkflowAsyncWithParameters(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWorkflowAsyncWithParameters", reflect.TypeOf((*MockDeploymentService)(nil).RunWorkflowAsyncWithParameters), arg0, arg1, arg2, arg3, arg4, arg5)
}

// RunWorkflowWithParameters mocks base method.
func (m *MockDeploymentService) RunWorkflowWithParameters(arg0 context.Context, arg1, arg2, arg3 string, arg4 map[string]interface{}, arg5 time.Duration) (*alien4cloud.Execution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWorkflowWithParameters", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*alien4cloud.Execution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWorkflowWithParameters indicates an expected call of RunWorkflowWithParameters.
func (mr *MockDeploymentServiceMockRecorder) RunWorkflowWithParameters(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWorkflowWithParameters", reflect.TypeOf((*MockDeploymentService)(nil).RunWorkflowWithParameters), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UndeployApplication mocks base method.
func (m *MockDeploymentService) UndeployApplication(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndeployApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndeployApplication indicates an expected call of UndeployApplication.
func (mr *MockDeploymentServiceMockRecorder) UndeployApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndeployApplication", reflect.TypeOf((*MockDeploymentService)(nil).UndeployApplication), arg0, arg1, arg2)
}

// UpdateApplication mocks base method.
func (m *MockDeploymentService) UpdateApplication(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockDeploymentServiceMockRecorder) UpdateApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockDeploymentService)(nil).UpdateApplication), arg0, arg1, arg2)
}

// UpdateDeploymentTopology mocks base method.
func (m *MockDeploymentService) UpdateDeploymentTopology(arg0 context.Context, arg1, arg2 string, arg3 alien4cloud.UpdateDeploymentTopologyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeploymentTopology", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeploymentTopology indicates an expected call of UpdateDeploymentTopology.
func (mr *MockDeploymentServiceMockRecorder) UpdateDeploymentTopology(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeploymentTopology", reflect.TypeOf((*MockDeploymentService)(nil).UpdateDeploymentTopology), arg0, arg1, arg2, arg3)
}

// UploadDeploymentInputArtifact mocks base method.
func (m *MockDeploymentService) UploadDeploymentInputArtifact(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadDeploymentInputArtifact", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadDeploymentInputArtifact indicates an expected call of UploadDeploymentInputArtifact.
func (mr *MockDeploymentServiceMockRecorder) UploadDeploymentInputArtifact(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadDeploymentInputArtifact", reflect.TypeOf((*MockDeploymentService)(nil).UploadDeploymentInputArtifact), arg0, arg1, arg2, arg3, arg4)
}

// WaitUntilStateIs mocks base method.
func (m *MockDeploymentService) WaitUntilStateIs(arg0 context.Context, arg1, arg2 string, arg3 ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilStateIs", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitUntilStateIs indicates an expected call of WaitUntilStateIs.
func (mr *MockDeploymentServiceMockRecorder) WaitUntilStateIs(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilStateIs", reflect.TypeOf((*MockDeploymentService)(nil).WaitUntilStateIs), varargs...)
}
