// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alien4cloud/alien4cloud-go-client/v3/alien4cloud (interfaces: TopologyService)

// Package a4cmocks is a generated GoMock package.
package a4cmocks

import (
	context "context"
	reflect "reflect"

	alien4cloud "github.com/alien4cloud/alien4cloud-go-client/v3/alien4cloud"
	gomock "github.com/golang/mock/gomock"
)

// MockTopologyService is a mock of TopologyService interface.
type MockTopologyService struct {
	ctrl     *gomock.Controller
	recorder *MockTopologyServiceMockRecorder
}

// MockTopologyServiceMockRecorder is the mock recorder for MockTopologyService.
type MockTopologyServiceMockRecorder struct {
	mock *MockTopologyService
}

// NewMockTopologyService creates a new mock instance.
func NewMockTopologyService(ctrl *gomock.Controller) *MockTopologyService {
	mock := &MockTopologyService{ctrl: ctrl}
	mock.recorder = &MockTopologyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopologyService) EXPECT() *MockTopologyServiceMockRecorder {
	return m.recorder
}

// AddNodeInA4CTopology mocks base method.
func (m *MockTopologyService) AddNodeInA4CTopology(arg0 context.Context, arg1 *alien4cloud.TopologyEditorContext, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNodeInA4CTopology", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNodeInA4CTopology indicates an expected call of AddNodeInA4CTopology.
func (mr *MockTopologyServiceMockRecorder) AddNodeInA4CTopology(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNodeInA4CTopology", reflect.TypeOf((*MockTopologyService)(nil).AddNodeInA4CTopology), arg0, arg1, arg2, arg3)
}

// AddPolicy mocks base method.
func (m *MockTopologyService) AddPolicy(arg0 context.Context, arg1 *alien4cloud.TopologyEditorContext, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPolicy indicates an expected call of AddPolicy.
func (mr *MockTopologyServiceMockRecorder) AddPolicy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicy", reflect.TypeOf((*MockTopologyService)(nil).AddPolicy), arg0, arg1, arg2, arg3)
}

// AddRelationship mocks base method.
func (m *MockTopologyService) AddRelationship(arg0 context.Context, arg1 *alien4cloud.TopologyEditorContext, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelationship", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRelationship indicates an expected call of AddRelationship.
func (mr *MockTopologyServiceMockRecorder) AddRelationship(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelationship", reflect.TypeOf((*MockTopologyService)(nil).AddRelationship), arg0, arg1, arg2, arg3, arg4)
}

// AddTargetsToPolicy mocks base method.
func (m *MockTopologyService) AddTargetsToPolicy(arg0 context.Context, arg1 *alien4cloud.TopologyEditorContext, arg2 string, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTargetsToPolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTargetsToPolicy indicates an expected call of AddTargetsToPolicy.
func (mr *MockTopologyServiceMockRecorder) AddTargetsToPolicy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTargetsToPolicy", reflect.TypeOf((*MockTopologyService)(nil).AddTargetsToPolicy), arg0, arg1, arg2, arg3)
}

// AddWorkflowActivity mocks base method.
func (m *MockTopologyService) AddWorkflowActivity(arg0 context.Context, arg1 *alien4cloud.TopologyEditorContext, arg2 string, arg3 *alien4cloud.WorkflowActivity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowActivity", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWorkflowActivity indicates an expected call of AddWorkflowActivity.
func (mr *MockTopologyServiceMockRecorder) AddWorkflowActivity(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowActivity", reflect.TypeOf((*MockTopologyService)(nil).AddWorkflowActivity), arg0, arg1, arg2, arg3)
}

// CreateWorkflow mocks base method.
func (m *MockTopologyService) CreateWorkflow(arg0 context.Context, arg1 *alien4cloud.TopologyEditorContext, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockTopologyServiceMockRecorder) CreateWorkflow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockTopologyService)(nil).CreateWorkflow), arg0, arg1, arg2)
}

// DeletePolicy mocks base method.
func (m *MockTopologyService) DeletePolicy(arg0 context.Context, arg1 *alien4cloud.TopologyEditorContext, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockTopologyServiceMockRecorder) DeletePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockTopologyService)(nil).DeletePolicy), arg0, arg1, arg2)
}

// DeleteWorkflow mocks base method.
func (m *MockTopologyService) DeleteWorkflow(arg0 context.Context, arg1 *alien4cloud.TopologyEditorContext, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflow", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkflow indicates an expected call of DeleteWorkflow.
func (mr *MockTopologyServiceMockRecorder) DeleteWorkflow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockTopologyService)(nil).DeleteWorkflow), arg0, arg1, arg2)
}

// GetTopologies mocks base method.
func (m *MockTopologyService) GetTopologies(arg0 context.Context, arg1 string) ([]alien4cloud.BasicTopologyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologies", arg0, arg1)
	ret0, _ := ret[0].([]alien4cloud.BasicTopologyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopologies indicates an expected call of GetTopologies.
func (mr *MockTopologyServiceMockRecorder) GetTopologies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologies", reflect.TypeOf((*MockTopologyService)(nil).GetTopologies), arg0, arg1)
}

// GetTopology mocks base method.
func (m *MockTopologyService) GetTopology(arg0 context.Context, arg1, arg2 string) (*alien4cloud.Topology, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopology", arg0, arg1, arg2)
	ret0, _ := ret[0].(*alien4cloud.Topology)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopology indicates an expected call of GetTopology.
func (mr *MockTopologyServiceMockRecorder) GetTopology(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopology", reflect.TypeOf((*MockTopologyService)(nil).GetTopology), arg0, arg1, arg2)
}

// GetTopologyByID mocks base method.
func (m *MockTopologyService) GetTopologyByID(arg0 context.Context, arg1 string) (*alien4cloud.Topology, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologyByID", arg0, arg1)
	ret0, _ := ret[0].(*alien4cloud.Topology)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopologyByID indicates an expected call of GetTopologyByID.
func (mr *MockTopologyServiceMockRecorder) GetTopologyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologyByID", reflect.TypeOf((*MockTopologyService)(nil).GetTopologyByID), arg0, arg1)
}

// GetTopologyID mocks base method.
func (m *MockTopologyService) GetTopologyID(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologyID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopologyID indicates an expected call of GetTopologyID.
func (mr *MockTopologyServiceMockRecorder) GetTopologyID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologyID", reflect.TypeOf((*MockTopologyService)(nil).GetTopologyID), arg0, arg1, arg2)
}

// GetTopologyTemplateIDByName mocks base method.
func (m *MockTopologyService) GetTopologyTemplateIDByName(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologyTemplateIDByName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopologyTemplateIDByName indicates an expected call of GetTopologyTemplateIDByName.
func (mr *MockTopologyServiceMockRecorder) GetTopologyTemplateIDByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologyTemplateIDByName", reflect.TypeOf((*MockTopologyService)(nil).GetTopologyTemplateIDByName), arg0, arg1)
}

// SaveA4CTopology mocks base method.
func (m *MockTopologyService) SaveA4CTopology(arg0 context.Context, arg1 *alien4cloud.TopologyEditorContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveA4CTopology", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveA4CTopology indicates an expected call of SaveA4CTopology.
func (mr *MockTopologyServiceMockRecorder) SaveA4CTopology(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveA4CTopology", reflect.TypeOf((*MockTopologyService)(nil).SaveA4CTopology), arg0, arg1)
}

// UpdateCapabilityProperty mocks base method.
func (m *MockTopologyService) UpdateCapabilityProperty(arg0 context.Context, arg1 *alien4cloud.TopologyEditorContext, arg2, arg3, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCapabilityProperty", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCapabilityProperty indicates an expected call of UpdateCapabilityProperty.
func (mr *MockTopologyServiceMockRecorder) UpdateCapabilityProperty(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCapabilityProperty", reflect.TypeOf((*MockTopologyService)(nil).UpdateCapabilityProperty), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateComponentProperty mocks base method.
func (m *MockTopologyService) UpdateComponentProperty(arg0 context.Context, arg1 *alien4cloud.TopologyEditorContext, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComponentProperty", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComponentProperty indicates an expected call of UpdateComponentProperty.
func (mr *MockTopologyServiceMockRecorder) UpdateComponentProperty(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComponentProperty", reflect.TypeOf((*MockTopologyService)(nil).UpdateComponentProperty), arg0, arg1, arg2, arg3, arg4)
}

// UpdateComponentPropertyComplexType mocks base method.
func (m *MockTopologyService) UpdateComponentPropertyComplexType(arg0 context.Context, arg1 *alien4cloud.TopologyEditorContext, arg2, arg3 string, arg4 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComponentPropertyComplexType", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComponentPropertyComplexType indicates an expected call of UpdateComponentPropertyComplexType.
func (mr *MockTopologyServiceMockRecorder) UpdateComponentPropertyComplexType(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComponentPropertyComplexType", reflect.TypeOf((*MockTopologyService)(nil).UpdateComponentPropertyComplexType), arg0, arg1, arg2, arg3, arg4)
}
