// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alien4cloud/alien4cloud-go-client/v3/alien4cloud (interfaces: LogService)

// Package a4cmocks is a generated GoMock package.
package a4cmocks

import (
	context "context"
	reflect "reflect"

	alien4cloud "github.com/alien4cloud/alien4cloud-go-client/v3/alien4cloud"
	gomock "github.com/golang/mock/gomock"
)

// MockLogService is a mock of LogService interface.
type MockLogService struct {
	ctrl     *gomock.Controller
	recorder *MockLogServiceMockRecorder
}

// MockLogServiceMockRecorder is the mock recorder for MockLogService.
type MockLogServiceMockRecorder struct {
	mock *MockLogService
}

// NewMockLogService creates a new mock instance.
func NewMockLogService(ctrl *gomock.Controller) *MockLogService {
	mock := &MockLogService{ctrl: ctrl}
	mock.recorder = &MockLogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogService) EXPECT() *MockLogServiceMockRecorder {
	return m.recorder
}

// GetLogsOfApplication mocks base method.
func (m *MockLogService) GetLogsOfApplication(arg0 context.Context, arg1, arg2 string, arg3 alien4cloud.LogFilter, arg4 int) ([]alien4cloud.Log, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogsOfApplication", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]alien4cloud.Log)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLogsOfApplication indicates an expected call of GetLogsOfApplication.
func (mr *MockLogServiceMockRecorder) GetLogsOfApplication(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogsOfApplication", reflect.TypeOf((*MockLogService)(nil).GetLogsOfApplication), arg0, arg1, arg2, arg3, arg4)
}
